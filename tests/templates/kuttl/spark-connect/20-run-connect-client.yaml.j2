---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simple-connect-app
  labels:
    stackable.tech/vendor: Stackable
data:
  simple-connect-app.py: |
    import sys

    from pyspark.sql import SparkSession
    from pyspark.sql.types import *

    remote = sys.argv[1]
    spark = (SparkSession.builder
      .remote(remote)
      .appName("simple-connect-app")
      .getOrCreate())

    schema = StructType([
      StructField("id", LongType(), True),
      StructField("data", StringType(), True)
    ])


    # create table
    df = spark.createDataFrame([], schema)
    df.writeTo("local.db.table").create()

    # append to table
    data = [
        (1,"one"),
        (2,"two"),
        (3,"three"),
        (4,"four")
      ]

    df = spark.createDataFrame(data, schema)
    df.writeTo("local.db.table").append()

---
apiVersion: batch/v1
kind: Job
metadata:
  name: simple-connect-app
  labels:
    stackable.tech/vendor: Stackable
spec:
  template:
    spec:
      restartPolicy: OnFailure
      activeDeadlineSeconds: 100
      volumes:
        - name: script
          configMap:
            name: simple-connect-app
      containers:
        - name: simple-connect-app
{% if test_scenario['values']['spark-connect-client'].find(",") > 0 %}
          image: "{{ test_scenario['values']['spark-connect-client'].split(',')[1] }}"
{% else %}
          image: oci.stackable.tech/sdp/spark-connect-client:{{ test_scenario['values']['spark-connect-client'] }}-stackable0.0.0-dev
{% endif %}
          imagePullPolicy: IfNotPresent
          #
          # TODO: cannot use the PySpark job from the ConfigMap because it breaks
          # with a "iceberg.SparkWrite$WriterFactory" ClassNotfoundException.
          # Use the app bundled within spark-connect-client instead
          # "/app/simple-connect-app.py",
          #
          command:
            [
              "/usr/bin/python",
              "/stackable/spark-connect-examples/python/simple-connect-app.py",
              "sc://spark-connect-server",
            ]
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 200m
              memory: 128Mi
          volumeMounts:
            - name: script
              mountPath: /app
